const fs = require('node:fs');
const path = require('node:path');

// Function to extract bytecode from a contract artifact
function extractBytecode(contractName, artifactPath) {
  try {
    const artifact = JSON.parse(fs.readFileSync(artifactPath, 'utf8'));
    return artifact.bytecode || '0x';
  } catch (error) {
    console.error(`Error reading ${contractName} artifact:`, error);
    return '0x';
  }
}

// Extract bytecode for each contract
const bytecodeData = {
  BaseMoonNFT: extractBytecode('BaseMoonNFT', path.join(__dirname, 'artifacts', 'contracts', 'BaseMoonNFT.sol', 'BaseMoonNFT.json')),
  BaseMoonToken: extractBytecode('BaseMoonToken', path.join(__dirname, 'artifacts', 'contracts', 'BaseMoonToken.sol', 'BaseMoonToken.json')),
  BaseMoonStorage: extractBytecode('BaseMoonStorage', path.join(__dirname, 'artifacts', 'contracts', 'BaseMoonStorage.sol', 'BaseMoonStorage.json'))
};

// Create TypeScript file with bytecode exports
const tsContent = `// SPDX-License-Identifier: MIT
// This file contains the bytecode for the BaseMoon contracts
// Auto-generated by extractBytecode.js

export const CONTRACT_BYTECODE = {
  BaseMoonNFT: "${bytecodeData.BaseMoonNFT}",
  BaseMoonToken: "${bytecodeData.BaseMoonToken}",
  BaseMoonStorage: "${bytecodeData.BaseMoonStorage}"
} as const;

// If bytecode is not available, these will be empty strings
export const HAS_BYTECODE = !!CONTRACT_BYTECODE.BaseMoonNFT && CONTRACT_BYTECODE.BaseMoonNFT !== "0x" &&
                           !!CONTRACT_BYTECODE.BaseMoonToken && CONTRACT_BYTECODE.BaseMoonToken !== "0x" &&
                           !!CONTRACT_BYTECODE.BaseMoonStorage && CONTRACT_BYTECODE.BaseMoonStorage !== "0x";
`;

fs.writeFileSync(path.join(__dirname, 'src', 'contractBytecode.ts'), tsContent);
console.log('Bytecode extracted and saved to src/contractBytecode.ts');